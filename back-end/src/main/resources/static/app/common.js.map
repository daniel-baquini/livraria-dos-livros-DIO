{"version":3,"file":"common.js","mappings":"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","sources":["./src/app/shared/backend/book/book.service.ts","./src/app/shared/backend/crud-backend.service.ts","./node_modules/rxjs/dist/esm/internal/firstValueFrom.js"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CrudBackendService } from '../crud-backend.service';\nimport Book from './book.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BookService {\n\n    public readonly controllerPath: string = \"book\";\n\n    constructor(private crudBackendService: CrudBackendService) { }\n\n    create(model: Book): Promise<void> {\n        throw new Error('Method not implemented.');\n    }\n\n    delete(id: string): Promise<void> {\n        throw new Error('Method not implemented.');\n    }\n\n    read(id: any): Observable<Book | undefined> {\n        return this.crudBackendService.read<Book>(this.controllerPath, id);\n    }\n\n    readAll(): Observable<Book[]> {\n        return this.crudBackendService.readAll<Book>(this.controllerPath);\n    }\n\n    update(model: Book): Promise<void> {\n        throw new Error('Method not implemented.');\n    }\n}\n","import { environment } from 'src/environments/environment';\nimport { firstValueFrom, Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CrudBackendService {\n    \n    constructor(private httpClient: HttpClient) { }\n\n    create<T>(model: any): Promise<T> {\n        throw new Error('Method not implemented.');\n        \n        return firstValueFrom(\n            this.httpClient.post<T>(\n                environment.backendUrl,\n                JSON.stringify(model),\n                { headers: { \"Content-type\": \"application/json\" } }\n            )\n        );\n    }\n    \n    delete(id: string): Promise<void> {\n        throw new Error('Method not implemented.');\n    }\n    \n    read<T>(controllerPath: string, id: any): Observable<T | undefined> {\n        return this.httpClient.get<T | undefined>(\n            `${environment.backendUrl}/${controllerPath}/get/${id}`,\n            { headers: { \"Content-type\": \"application/json\" } }\n        )\n    }\n\n    readAll<T>(controllerPath: string): Observable<T[]> {\n        return this.httpClient.get<T[]>(\n            `${environment.backendUrl}/${controllerPath}/getAll`,\n            { headers: { \"Content-type\": \"application/json\" } }\n        )\n    }\n\n    update(model: any): Promise<void> {\n        throw new Error('Method not implemented.');\n    }\n}\n","import { EmptyError } from './util/EmptyError';\nimport { SafeSubscriber } from './Subscriber';\nexport function firstValueFrom(source, config) {\n    const hasConfig = typeof config === 'object';\n    return new Promise((resolve, reject) => {\n        const subscriber = new SafeSubscriber({\n            next: (value) => {\n                resolve(value);\n                subscriber.unsubscribe();\n            },\n            error: reject,\n            complete: () => {\n                if (hasConfig) {\n                    resolve(config.defaultValue);\n                }\n                else {\n                    reject(new EmptyError());\n                }\n            },\n        });\n        source.subscribe(subscriber);\n    });\n}\n"],"names":["EmptyError","SafeSubscriber","firstValueFrom","source","config","hasConfig","Promise","resolve","reject","subscriber","next","value","unsubscribe","error","complete","defaultValue","subscribe"],"sourceRoot":"webpack:///"}