{"version":3,"file":"common.js","mappings":";;;;;;;;;;;;;;;;;AAQO,MAAM,WAAW;IAIpB,YAAoB,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;QAF1C,mBAAc,GAAW,MAAM,CAAC;IAEc,CAAC;IAE/D,IAAI,CAAC,EAAO;QACR,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAO,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;IACvE,CAAC;IAED,OAAO;QACH,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAO,IAAI,CAAC,cAAc,CAAC,CAAC;IACtE,CAAC;;sEAZQ,WAAW;4GAAX,WAAW,WAAX,WAAW,mBAFR,MAAM;;;;;;;;;;;;;;;;;;ACNqC;;;AAQpD,MAAM,kBAAkB;IAE3B,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAI,CAAC;IAE/C,MAAM,CAAI,cAAsB,EAAE,KAAQ;QACtC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,GAAG,gFAAsB,QAAQ,cAAc,SAAS,EACxD,KAAK,EACL,EAAE,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,EAAE,CACtD,CAAC;IACN,CAAC;IAED,MAAM,CAAC,EAAU;QACb,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC/C,CAAC;IAED,IAAI,CAAI,cAAsB,EAAE,EAAO;QACnC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACtB,GAAG,gFAAsB,QAAQ,cAAc,QAAQ,EAAE,EAAE,EAC3D,EAAE,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,EAAE,CACtD;IACL,CAAC;IAED,OAAO,CAAI,cAAsB;QAC7B,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACtB,GAAG,gFAAsB,QAAQ,cAAc,SAAS,EACxD,EAAE,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,EAAE,CACtD;IACL,CAAC;IAED,MAAM,CAAC,KAAU;QACb,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC/C,CAAC;;oFAhCQ,kBAAkB;mHAAlB,kBAAkB,WAAlB,kBAAkB,mBAFf,MAAM","sources":["./src/app/shared/backend/book/book.service.ts","./src/app/shared/backend/crud-backend.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { CrudBackendService } from '../crud-backend.service';\nimport Book from './book.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BookService {\n\n    public readonly controllerPath: string = \"book\";\n\n    constructor(private crudBackendService: CrudBackendService) { }\n\n    read(id: any): Observable<Book | undefined> {\n        return this.crudBackendService.read<Book>(this.controllerPath, id);\n    }\n\n    readAll(): Observable<Book[]> {\n        return this.crudBackendService.readAll<Book>(this.controllerPath);\n    }\n\n}\n","import { environment } from 'src/environments/environment';\nimport { firstValueFrom, Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CrudBackendService {\n    \n    constructor(private httpClient: HttpClient) { }\n\n    create<T>(controllerPath: string, model: T): Observable<string> {\n        return this.httpClient.post<string>(\n            `${environment.backendUrl}/api/${controllerPath}/create`,\n            model,\n            { headers: { \"Content-type\": \"application/json\" } }\n        );\n    }\n    \n    delete(id: string): Promise<void> {\n        throw new Error('Method not implemented.');\n    }\n    \n    read<T>(controllerPath: string, id: any): Observable<T | undefined> {\n        return this.httpClient.get<T | undefined>(\n            `${environment.backendUrl}/api/${controllerPath}/get/${id}`,\n            { headers: { \"Content-type\": \"application/json\" } }\n        )\n    }\n\n    readAll<T>(controllerPath: string): Observable<T[]> {\n        return this.httpClient.get<T[]>(\n            `${environment.backendUrl}/api/${controllerPath}/getAll`,\n            { headers: { \"Content-type\": \"application/json\" } }\n        )\n    }\n\n    update(model: any): Promise<void> {\n        throw new Error('Method not implemented.');\n    }\n}\n"],"names":[],"sourceRoot":"webpack:///"}